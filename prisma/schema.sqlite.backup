// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Chore system fields
  familyId      String?
  age           Int?
  nickname      String?   // S, L, M, P etc.
  isAdmin       Boolean   @default(false)
  
  family        Family?   @relation(fields: [familyId], references: [id])
  choreAssignments ChoreAssignment[]
  pointsEarned  PointsEarned[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Family {
  id          String   @id @default(cuid())
  name        String
  inviteCode  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  members     User[]
  chores      Chore[]
  choreAssignments ChoreAssignment[]
  pointsEarned PointsEarned[]
  weeklyGoals WeeklyGoal[]
}

model Chore {
  id          String   @id @default(cuid())
  name        String
  description String?
  points      Int
  minAge      Int      @default(0)
  difficulty  String   @default("Easy") // Easy, Medium, Hard
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  familyId    String
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  
  assignments ChoreAssignment[]
}

model ChoreAssignment {
  id          String   @id @default(cuid())
  date        DateTime
  dayOfWeek   String   // Monday, Tuesday, etc.
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  
  choreId     String
  userId      String
  familyId    String
  
  chore       Chore    @relation(fields: [choreId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  
  @@unique([choreId, userId, date])
}

model PointsEarned {
  id          String   @id @default(cuid())
  points      Int
  date        DateTime
  weekStart   DateTime // Start of the week for tracking
  createdAt   DateTime @default(now())
  
  userId      String
  familyId    String
  choreId     String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model WeeklyGoal {
  id          String   @id @default(cuid())
  weekStart   DateTime
  pointsGoal  Int
  createdAt   DateTime @default(now())
  
  familyId    String
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  
  @@unique([familyId, weekStart])
}
