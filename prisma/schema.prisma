generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  familyId         String?
  age              Int?
  nickname         String?
  isAdmin          Boolean           @default(false)
  totalPoints      Int               @default(0)
  isOwner          Boolean           @default(false)
  location         String?           // User's location (city, state/country)
  timezone         String?           // User's timezone (e.g., "America/Los_Angeles")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  activityLogs     ActivityLog[]
  auctionBids      AuctionBid[]
  choreAssignments ChoreAssignment[]
  pointsEarned     PointsEarned[]
  sessions         Session[]
  suggestions      Suggestion[]
  family           Family?           @relation(fields: [familyId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Family {
  id               String            @id @default(cuid())
  name             String
  inviteCode       String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  auctions         Auction[]
  auctionBids      AuctionBid[]
  chores           Chore[]
  choreAssignments ChoreAssignment[]
  pointsEarned     PointsEarned[]
  suggestions      Suggestion[]
  members          User[]
  weeklyGoals      WeeklyGoal[]
  activityLogs     ActivityLog[]
}

model Chore {
  id               String            @id @default(cuid())
  name             String
  description      String?
  points           Int
  minAge           Int?
  difficulty       String            @default("medium")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  familyId         String
  basePoints       Int?
  auctions         Auction[]
  family           Family            @relation(fields: [familyId], references: [id], onDelete: Cascade)
  choreAssignments ChoreAssignment[]
}

model ChoreAssignment {
  id          String    @id @default(cuid())
  date        DateTime
  dayOfWeek   String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  choreId     String
  userId      String
  familyId    String
  updatedAt   DateTime  @updatedAt
  chore       Chore     @relation(fields: [choreId], references: [id], onDelete: Cascade)
  family      Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, choreId, date])
}

model PointsEarned {
  id        String   @id @default(cuid())
  points    Int
  date      DateTime
  weekStart DateTime
  createdAt DateTime @default(now())
  userId    String
  familyId  String
  choreId   String?
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Auction {
  id          String       @id @default(cuid())
  choreId     String
  familyId    String
  weekStart   DateTime
  endTime     DateTime
  status      String       @default("active")
  title       String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Chore       Chore        @relation(fields: [choreId], references: [id], onDelete: Cascade)
  family      Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  bids        AuctionBid[]

  @@unique([choreId, weekStart])
}

model AuctionBid {
  id        String   @id @default(cuid())
  auctionId String
  userId    String
  familyId  String
  bidPoints Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([auctionId, userId])
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  createdAt DateTime @default(now())
  userId    String
  familyId  String
  details   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model WeeklyGoal {
  id        String   @id @default(cuid())
  weekStart DateTime
  createdAt DateTime @default(now())
  familyId  String
  target    Int
  updatedAt DateTime @updatedAt
  goalType  String   @default("points")
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([familyId, weekStart])
}

model Suggestion {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   @default("general")
  priority    String   @default("medium")
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  familyId    String?
  userEmail   String?
  userName    String?
  family      Family?  @relation(fields: [familyId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
}
