generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  familyId         String?
  age              Int?
  nickname         String?
  isAdmin          Boolean            @default(false)
  isOwner          Boolean            @default(false)
  totalPoints      Int                @default(0)
  accounts         Account[]
  ActivityLog      ActivityLog[]
  choreAssignments ChoreAssignment[]
  ChoreAuction     ChoreAuction[]
  ChoreBid         ChoreBid[]
  pointsEarned     PointsEarned[]
  sessions         Session[]
  suggestions      Suggestion[]
  family           Family?            @relation(fields: [familyId], references: [id])
  
  // New reward system relations
  createdRewards   Reward[]         @relation("RewardCreator")
  rewardClaims     RewardClaim[]    @relation("UserRewardClaims")
  approvedClaims   RewardClaim[]    @relation("RewardApprover")
  createdGoals     PointGoal[]      @relation("GoalCreator")
  goalProgress     GoalProgress[]   @relation("UserGoalProgress")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Family {
  id               String            @id @default(cuid())
  name             String
  inviteCode       String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  chores           Chore[]
  choreAssignments ChoreAssignment[]
  ChoreAuction     ChoreAuction[]
  pointsEarned     PointsEarned[]
  members          User[]
  suggestions      Suggestion[]
  weeklyGoals      WeeklyGoal[]
  
  // New reward system relations
  newRewards       Reward[]         @relation("FamilyRewards")
  rewardClaims     RewardClaim[]
  pointGoals       PointGoal[]
  goalProgress     GoalProgress[]
}

model Chore {
  id                String            @id @default(cuid())
  name              String
  description       String?
  points            Int
  minAge            Int               @default(0)
  difficulty        String            @default("Easy")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  familyId          String
  basePoints        Int               @default(10)
  isRecurring       Boolean           @default(false)
  
  // Recurring chore fields
  recurrenceType    String?           // 'daily', 'weekly', 'biweekly', 'monthly', 'custom'
  recurrenceInterval Int?             // For custom intervals (every N days/weeks)
  recurrenceDays    String?           // JSON array of days for weekly/biweekly ['monday', 'wednesday']
  recurrenceEndDate DateTime?         // When to stop recurring (optional)
  lastGenerated     DateTime?         // Last time chores were generated from this pattern
  isActive          Boolean           @default(true) // Can disable recurring without deleting
  
  family            Family            @relation(fields: [familyId], references: [id], onDelete: Cascade)
  assignments       ChoreAssignment[]
  ChoreAuction      ChoreAuction[]
}

model ChoreAssignment {
  id          String    @id @default(cuid())
  date        DateTime
  dayOfWeek   String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  choreId     String
  userId      String
  familyId    String
  chore       Chore     @relation(fields: [choreId], references: [id], onDelete: Cascade)
  family      Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([choreId, userId, date])
}

model PointsEarned {
  id        String   @id @default(cuid())
  points    Int
  date      DateTime
  weekStart DateTime
  createdAt DateTime @default(now())
  userId    String
  familyId  String
  choreId   String?
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WeeklyGoal {
  id         String   @id @default(cuid())
  weekStart  DateTime
  pointsGoal Int
  createdAt  DateTime @default(now())
  familyId   String
  family     Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([familyId, weekStart])
}

model ActivityLog {
  id          String   @id
  action      String
  description String
  metadata    String?
  createdAt   DateTime @default(now())
  userId      String
  familyId    String?
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChoreAuction {
  id          String     @id
  weekStart   DateTime
  status      String     @default("active")
  startPoints Int
  finalPoints Int?
  winnerId    String?
  createdAt   DateTime   @default(now())
  endsAt      DateTime
  choreId     String
  familyId    String
  Chore       Chore      @relation(fields: [choreId], references: [id], onDelete: Cascade)
  Family      Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  User        User?      @relation(fields: [winnerId], references: [id])
  ChoreBid    ChoreBid[]

  @@unique([choreId, weekStart])
}

model ChoreBid {
  id           String       @id
  bidPoints    Int
  createdAt    DateTime     @default(now())
  auctionId    String
  userId       String
  ChoreAuction ChoreAuction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([auctionId, userId])
}

model Reward {
  id          String   @id @default(cuid())
  title       String
  description String?
  pointsRequired Int
  isActive    Boolean  @default(true)
  category    String   @default("general") // general, privilege, item, experience
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  familyId    String
  createdBy   String
  
  family      Family   @relation("FamilyRewards", fields: [familyId], references: [id], onDelete: Cascade)
  creator     User     @relation("RewardCreator", fields: [createdBy], references: [id])
  claims      RewardClaim[]
  goals       PointGoal[]
}

model RewardClaim {
  id          String   @id @default(cuid())
  rewardId    String
  userId      String
  familyId    String
  pointsSpent Int
  status      String   @default("pending") // pending, approved, delivered, cancelled
  claimedAt   DateTime @default(now())
  approvedAt  DateTime?
  approvedBy  String?
  notes       String?
  
  reward      Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  user        User     @relation("UserRewardClaims", fields: [userId], references: [id], onDelete: Cascade)
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  approver    User?    @relation("RewardApprover", fields: [approvedBy], references: [id])
}

model PointGoal {
  id          String   @id @default(cuid())
  title       String
  description String?
  targetPoints Int
  timeframe   String   // weekly, monthly, custom
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  rewardId    String?
  familyId    String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  creator     User     @relation("GoalCreator", fields: [createdBy], references: [id])
  reward      Reward?  @relation(fields: [rewardId], references: [id])
  progress    GoalProgress[]
}

model GoalProgress {
  id          String   @id @default(cuid())
  goalId      String
  userId      String
  familyId    String
  currentPoints Int    @default(0)
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  lastUpdated DateTime @default(now())
  
  goal        PointGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user        User     @relation("UserGoalProgress", fields: [userId], references: [id], onDelete: Cascade)
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  
  @@unique([goalId, userId])
}

model Suggestion {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   @default("general") // general, feature, bug, improvement
  priority    String   @default("medium")  // low, medium, high
  status      String   @default("pending") // pending, reviewed, implemented, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  familyId    String?
  userEmail   String?
  userName    String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  family      Family?  @relation(fields: [familyId], references: [id], onDelete: SetNull)
}
