// Prisma schema for Production PostgreSQL Database
// This schema is used for production database migrations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  familyId      String?
  birthdate     DateTime? // Changed from age to birthdate
  nickname      String?
  isAdmin       Boolean   @default(false)
  isOwner       Boolean   @default(false)
  totalPoints   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  family              Family?              @relation(fields: [familyId], references: [id])
  choreAssignments    ChoreAssignment[]
  pointsEarned        PointsEarned[]
  auctionBids         AuctionBid[]
  activityLogs        ActivityLog[]
  suggestions         Suggestion[]
  createdRewards      Reward[]             @relation("RewardCreator")
  rewardClaims        RewardClaim[]        @relation("RewardClaims")
  approvedClaims      RewardClaim[]        @relation("RewardApprovals")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Family {
  id         String   @id @default(cuid())
  name       String
  inviteCode String   @unique
  location   String?  // City, State/Country
  timezone   String?  // IANA timezone identifier (e.g., "America/New_York")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  members          User[]
  chores           Chore[]
  choreAssignments ChoreAssignment[]
  pointsEarned     PointsEarned[]
  auctions         Auction[]
  auctionBids      AuctionBid[]
  activityLogs     ActivityLog[]
  weeklyGoals      WeeklyGoal[]
  suggestions      Suggestion[]
  rewards          Reward[]
  rewardClaims     RewardClaim[]
}

model Chore {
  id          String   @id @default(cuid())
  name        String
  description String?
  points      Int
  minAge      Int?
  difficulty  String   @default("medium")
  familyId    String
  basePoints  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family           Family            @relation(fields: [familyId], references: [id], onDelete: Cascade)
  choreAssignments ChoreAssignment[]
  auctions         Auction[]
}

model ChoreAssignment {
  id          String    @id @default(cuid())
  userId      String
  choreId     String
  familyId    String
  date        DateTime
  dayOfWeek   String
  completed   Boolean   @default(false)
  completedAt DateTime?
  bidPoints   Int?      // Points from auction bid (if assignment came from auction)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chore  Chore  @relation(fields: [choreId], references: [id], onDelete: Cascade)
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([userId, choreId, date])
}

model PointsEarned {
  id        String   @id @default(cuid())
  points    Int
  date      DateTime
  weekStart DateTime
  createdAt DateTime @default(now())
  userId    String
  familyId  String
  choreId   String?

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Auction {
  id          String    @id @default(cuid())
  choreId     String
  familyId    String
  weekStart   DateTime
  endTime     DateTime
  status      String    @default("active")
  title       String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Chore  Chore        @relation(fields: [choreId], references: [id], onDelete: Cascade)
  family Family       @relation(fields: [familyId], references: [id], onDelete: Cascade)
  bids   AuctionBid[]

  @@unique([choreId, weekStart])
}

model AuctionBid {
  id        String   @id @default(cuid())
  auctionId String
  userId    String
  familyId  String
  bidPoints Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  family  Family  @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([auctionId, userId])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  familyId  String
  action    String
  details   String?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model WeeklyGoal {
  id        String   @id @default(cuid())
  familyId  String
  weekStart DateTime
  goalType  String   @default("points")
  target    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([familyId, weekStart])
}

model Suggestion {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   @default("general")
  priority    String   @default("medium")
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  familyId    String?
  userEmail   String?
  userName    String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  family Family? @relation(fields: [familyId], references: [id], onDelete: SetNull)
}

model Reward {
  id             String        @id @default(cuid())
  title          String
  description    String?
  pointsRequired Int
  category       String
  imageUrl       String?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  creatorId      String
  familyId       String
  creator        User          @relation("RewardCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  family         Family        @relation(fields: [familyId], references: [id], onDelete: Cascade)
  claims         RewardClaim[]
}

model RewardClaim {
  id          String   @id @default(cuid())
  status      String   @default("pending") // pending, approved, rejected
  pointsSpent Int
  claimedAt   DateTime @default(now())
  approvedAt  DateTime?
  rewardId    String
  userId      String
  familyId    String
  approverId  String?
  reward      Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  user        User     @relation("RewardClaims", fields: [userId], references: [id], onDelete: Cascade)
  family      Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  approver    User?    @relation("RewardApprovals", fields: [approverId], references: [id])
}
